C51 COMPILER V9.57.0.0   LPF                                                               02/13/2020 09:12:16 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE LPF
OBJECT MODULE PLACED IN .\Objects\LPF.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LPF.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\LPF.l
                    -st) TABS(2) OBJECT(.\Objects\LPF.obj)

line level    source

   1          /*
   2           * File: LPF.c
   3           *
   4           * Code generated for Simulink model 'LPF'.
   5           *
   6           * Model version                  : 1.11
   7           * Simulink Coder version         : 8.14 (R2018a) 06-Feb-2018
   8           * C/C++ source code generated on : Thu Feb 13 09:10:53 2020
   9           *
  10           * Target selection: ert.tlc
  11           * Embedded hardware selection: Intel->8051 Compatible
  12           * Code generation objectives: Unspecified
  13           * Validation result: Not run
  14           */
  15          
  16          #include "LPF.h"
  17          #include "LPF_private.h"
  18          
  19          /* Block states (default storage) */
  20          DW_LPF_T LPF_DW;
  21          
  22          /* External inputs (root inport signals with default storage) */
  23          ExtU_LPF_T LPF_U;
  24          
  25          /* External outputs (root outports fed by signals with default storage) */
  26          ExtY_LPF_T LPF_Y;
  27          
  28          /* Real-time model */
  29          RT_MODEL_LPF_T LPF_M_;
  30          RT_MODEL_LPF_T *const LPF_M = &LPF_M_;
  31          
  32          /* Model step function */
  33          void LPF_step(void)
  34          {
  35   1        real_T rtb_Add1;
  36   1        real_T tmp;
  37   1      
  38   1        /* Sum: '<S1>/Add1' incorporates:
  39   1         *  DataTypeConversion: '<Root>/Data Type Conversion'
  40   1         *  Gain: '<S1>/Gain'
  41   1         *  Inport: '<Root>/In1'
  42   1         *  Sum: '<S1>/Add'
  43   1         *  UnitDelay: '<S1>/Unit Delay'
  44   1         */
  45   1        rtb_Add1 = ((real_T)LPF_U.In1 - LPF_DW.UnitDelay_DSTATE) * LPF_P.g +
  46   1          LPF_DW.UnitDelay_DSTATE;
  47   1      
  48   1        /* DataTypeConversion: '<Root>/Data Type Conversion1' */
  49   1        tmp = floor(rtb_Add1);
  50   1        if (rtIsNaN(tmp) || rtIsInf(tmp)) {
  51   2          tmp = 0.0;
  52   2        } else {
  53   2          tmp = fmod(tmp, 65536.0);
  54   2        }
C51 COMPILER V9.57.0.0   LPF                                                               02/13/2020 09:12:16 PAGE 2   

  55   1      
  56   1        /* Outport: '<Root>/Out1' incorporates:
  57   1         *  DataTypeConversion: '<Root>/Data Type Conversion1'
  58   1         */
  59   1        LPF_Y.Out1 = tmp < 0.0 ? (uint16_T)-(int16_T)(uint16_T)-tmp : (uint16_T)tmp;
  60   1      
  61   1        /* Update for UnitDelay: '<S1>/Unit Delay' */
  62   1        LPF_DW.UnitDelay_DSTATE = rtb_Add1;
  63   1      }
  64          
  65          /* Model initialize function */
  66          void LPF_initialize(void)
  67          {
  68   1        /* Registration code */
  69   1      
  70   1        /* initialize non-finites */
  71   1        rt_InitInfAndNaN(sizeof(real_T));
  72   1      
  73   1        /* initialize error status */
  74   1        rtmSetErrorStatus(LPF_M, (NULL));
  75   1      
  76   1        /* states (dwork) */
  77   1        (void) memset((void *)&LPF_DW, 0,
  78   1                      sizeof(DW_LPF_T));
  79   1      
  80   1        /* external inputs */
  81   1        LPF_U.In1 = 0U;
  82   1      
  83   1        /* external outputs */
  84   1        LPF_Y.Out1 = 0U;
  85   1      
  86   1        /* InitializeConditions for UnitDelay: '<S1>/Unit Delay' */
  87   1        LPF_DW.UnitDelay_DSTATE = LPF_P.UnitDelay_InitialCondition;
  88   1      }
  89          
  90          /* Model terminate function */
  91          void LPF_terminate(void)
  92          {
  93   1        /* (no terminate code required) */
  94   1      }
  95          
  96          /*
  97           * File trailer for generated code.
  98           *
  99           * [EOF]
 100           */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    248    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
