C51 COMPILER V9.57.0.0   RTGETNAN                                                          02/13/2020 09:12:17 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE RTGETNAN
OBJECT MODULE PLACED IN .\Objects\rtGetNaN.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE rtGetNaN.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -rtGetNaN.lst) TABS(2) OBJECT(.\Objects\rtGetNaN.obj)

line level    source

   1          /*
   2           * File: rtGetNaN.c
   3           *
   4           * Code generated for Simulink model 'LPF'.
   5           *
   6           * Model version                  : 1.11
   7           * Simulink Coder version         : 8.14 (R2018a) 06-Feb-2018
   8           * C/C++ source code generated on : Thu Feb 13 09:10:53 2020
   9           *
  10           * Target selection: ert.tlc
  11           * Embedded hardware selection: Intel->8051 Compatible
  12           * Code generation objectives: Unspecified
  13           * Validation result: Not run
  14           */
  15          
  16          /*
  17           * Abstract:
  18           *      Function to initialize non-finite, NaN
  19           */
  20          #include "rtGetNaN.h"
  21          #define NumBitsPerChar                 8U
  22          
  23          /*
  24           * Initialize rtNaN needed by the generated code.
  25           * NaN is initialized as non-signaling. Assumes IEEE.
  26           */
  27          real_T rtGetNaN(void)
  28          {
  29   1        size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
  30   1        real_T nan = 0.0;
  31   1        if (bitsPerReal == 32U) {
  32   2          nan = rtGetNaNF();
  33   2        } else {
  34   2          uint16_T one = 1U;
  35   2          enum {
  36   2            LittleEndian,
  37   2            BigEndian
  38   2          } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
  39   2          switch (machByteOrder) {
  40   3           case LittleEndian:
  41   3            {
  42   4              union {
  43   4                LittleEndianIEEEDouble bitVal;
  44   4                real_T fltVal;
  45   4              } tmpVal;
  46   4      
  47   4              tmpVal.bitVal.words.wordH = 0xFFF80000U;
  48   4              tmpVal.bitVal.words.wordL = 0x00000000U;
  49   4              nan = tmpVal.fltVal;
  50   4              break;
  51   4            }
  52   3      
  53   3           case BigEndian:
  54   3            {
C51 COMPILER V9.57.0.0   RTGETNAN                                                          02/13/2020 09:12:17 PAGE 2   

  55   4              union {
  56   4                BigEndianIEEEDouble bitVal;
  57   4                real_T fltVal;
  58   4              } tmpVal;
  59   4      
  60   4              tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
  61   4              tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
  62   4              nan = tmpVal.fltVal;
  63   4              break;
  64   4            }
  65   3          }
  66   2        }
  67   1      
  68   1        return nan;
  69   1      }
  70          
  71          /*
  72           * Initialize rtNaNF needed by the generated code.
  73           * NaN is initialized as non-signaling. Assumes IEEE.
  74           */
  75          real32_T rtGetNaNF(void)
  76          {
  77   1        IEEESingle nanF = { { 0 } };
  78   1      
  79   1        uint16_T one = 1U;
  80   1        enum {
  81   1          LittleEndian,
  82   1          BigEndian
  83   1        } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
  84   1        switch (machByteOrder) {
  85   2         case LittleEndian:
  86   2          {
  87   3            nanF.wordL.wordLuint = 0xFFC00000U;
  88   3            break;
  89   3          }
  90   2      
  91   2         case BigEndian:
  92   2          {
  93   3            nanF.wordL.wordLuint = 0x7FFFFFFFU;
  94   3            break;
  95   3          }
  96   2        }
  97   1      
  98   1        return nanF.wordL.wordLreal;
  99   1      }
 100          
 101          /*
 102           * File trailer for generated code.
 103           *
 104           * [EOF]
 105           */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    196    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.57.0.0   RTGETNAN                                                          02/13/2020 09:12:17 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
